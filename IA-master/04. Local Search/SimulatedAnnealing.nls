;--------------------- Simulated Annealing Library ---------------------------

; This module provides the report AI:SimAnn allowing to apply Simulated
; Annealing Local Search algorithm to general problems.
; 
; Inorder to use this module, you have to customize 3 procedures:
;
; to-report AI:get-new-state [#state]
;    From one state, it generates a new one
;
; to-report AI:EnergyState [#state]
;    Calculates the energy of the state
;
; to AI:SimAnnExternalUpdates [params]
;    Aditional procedure that you want to execute in every cycle.
;    Mainly used to show information
;

;------------------------- Preamble Definitions ------------------------------
globals [
  AI:SimAnnGlobalEnergy    ; Store the Energy of the state
  AI:SimAnnTemperature     ; The current temperature of the system
  AI:accept-equal-changes? ; We accept changes in states with he same energy
]

;----------------------------- Main algorithm --------------------------------
;
; The main report. It uses the following parameters:
;
;    #Initial-state  : Initial State to start the search
;    #tries-by-cycle : Number of states to be visited in every cycle loop
;    #mim-Temp       : Min temperature to stop the search
;    #cooling-rate   : Cooling rate of the temperature in every cycle
;    #aec            : True/False ... we accept changes with the same energy? 

to-report AI:SimAnn [#Initial-state #tries-by-cycle 
                     #mim-Temp  #cooling-rate #aec]
  ; We start the Initial Temperature value, the Initial State and some other
  ; a parameters
  set AI:SimAnnTemperature 1
  set AI:accept-equal-changes? #aec
  let #state #Initial-state
  
  ; The main loop will decrease the temperature until reaching min-Temp  
  while [AI:SimAnnTemperature > #mim-Temp]
  [
    ; In every cycle, for the current Temp, we try a number of changes
    set #state AI:try-changes #tries-by-cycle #state
    ; After reaching a new state, the temperature is reduced ...
    set AI:SimAnnTemperature AI:SimAnnTemperature * (1 - #cooling-rate / 100)
    ; ... and compute the new energy
    set AI:SimAnnGlobalEnergy AI:EnergyState #state
    ; Finally, external updates, if any, are executed
    AI:SimAnnExternalUpdates #state
    ; If the Energy reachs the minimum, we stop the algorithm
    if AI:SimAnnGlobalEnergy = 0 [ report #state ]
  ]
  report #state
end

; Procedure to compute a sequence of new states and accept them if the 
; energy is lower, or if the temperature allows it. This sequence will
; work on a fixed temperature, inside a cycle

to-report AI:try-changes [tries #state]
  ; For a fixed Temp, we will make a number of tries
  repeat tries
  [
    ; Every try will compute a new state ...
    let old-state #state
    let old-energy AI:EnergyState #state
    let new-state AI:get-new-state #state
    let new-energy AI:EnergyState new-state
    ; ... and compares its energy with the previous one
    ; ... if the new energy is lower,
    ; ... (or equal if the flag AI:accept-equal-changes? is true)
    ; ... or being greater, the current Temp probably accepts it
    if (new-energy < old-energy) or
       (AI:accept-equal-changes? and new-energy = old-energy) or
;       ((random-float 1.0 < exp ((old-energy - new-energy) / AI:SimAnnTemperature)))
       ((random-float 1.0) < AI:SimAnnTemperature)
       [
         ; ... then we take the new state as current state
         set #state new-state
       ]
  ]
  report #state
end

