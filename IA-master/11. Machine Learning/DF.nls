extensions [csv]

;; A Dataframe Library
;; 
;; Something like:
;│ Outlook  │ Temp │ Humidity │ Windy │ PlayGolf │ 
;├──────────┼──────┼──────────┼───────┼──────────┤
;├──────────┼──────┼──────────┼───────┼──────────┤
;│ Rainy    │ Hot  │ High     │ false │ false    │ 
;├──────────┼──────┼──────────┼───────┼──────────┤
;│ Rainy    │ Hot  │ High     │ true  │ false    │ 
;├──────────┼──────┼──────────┼───────┼──────────┤
;│ Overcast │ Hot  │ High     │ false │ true     │ 
;├──────────┼──────┼──────────┼───────┼──────────┤
;│ Sunny    │ Mild │ High     │ false │ true     │ 
;├──────────┼──────┼──────────┼───────┼──────────┤
;│ Sunny    │ Cool │ Normal   │ false │ true     │ 
;└──────────┴──────┴──────────┴───────┴──────────┘
;
; It has a header row, with attributes names 
; and columns with values for the different 
; attributes.

; To do:
; 1. Dividir un DF en N DFs para train/test/validation. Considerar métodos de división (random, balanceado respecto de un atributo, etc)
; 2. Dar métodos de imputación. Considerar un representante de valor faltante.
; 3. Join Vertical/Horizontal de dos DFs. Decidir qué hacer con los atributos comunes/distintos.
;   Vertical: vcat:
;    The cols keyword argument determines the columns of the returned data frame:
;      ++ :equal (the default): require all data frames to have the same column names. If they appear in different orders, the order of the first provided data frame is used.
;      ++ :intersect: only the columns present in all provided data frames are kept. If the intersection is empty, an empty data frame is returned.
;      ++ :union: columns present in at least one of the provided data frames are kept. Columns not present in some data frames are filled with missing where necessary.
;      ++ A vector of Symbols: only listed columns are kept. Columns not present in some data frames are filled with missing where necessary.
; 4. Métodos map, filter, foreach ... por columnas?
; 5. Sort, sortby (por defecto, por filas... ¿y por columnas?)
; 6. Numerate (numera las filas)
; 7. Cat-to-Binary. Cambia una columna categórica con N valores distintos (a1...aN) en N columnas binarias con nombres a1...aN que indican si la fila es de un tipo u otro.

; Load a CSV file into a DF
to-report DF:load [f]
  if not file-exists? f [report false]
  ifelse is-string? f
  [
    report csv:from-file f
  ]
  [report false]
end

; Save a DF into a CSV file
to-report DF:save [df f]
  if file-exists? f [report false]
  csv:to-file f df
  report true
end

; Reports the header of the DF
to-report DF:header [df]
  report first df
end

; Reports the data of the DF
to-report DF:data [df]
  report bf df
end

; Reports the N first rows in DF
to-report DF:first [N df]
  report sublist df 0 (N + 1)
end

; Reports the N last rows in DF
to-report DF:last [N df]
  let ss length df
  report fput (DF:header df) (sublist df (ss - N) ss)
end

; Reports N random rows of DF
to-report DF:n-of [N df]
  report fput (DF:header df) (n-of N DF:data df)
end

; Reports a random split of DF into two new DFs: rat in [0,1]
; First DF will have rat of df and the other (1-rat)
to-report DF:split [df rat]
  let N first DF:size df
  let N1 floor (rat * N)
  let N2 N - N1
  set df DF:shuffle df
  let df1 fput (df:header df) (sublist (df:data df) 0 N1)
  let df2 fput (df:header df) (sublist (df:data df) N1 N)
  report (list df1 df2)
end

; Random shuffle of the elements of a DF
to-report DF:shuffle [df]
  report fput (DF:Header df) (shuffle DF:data df)
end

; Reports the size (N-rows x N-columns) of a DF
to-report DF:size [df]
  report (list (length DF:data df) (length DF:header df) )
end

; Reports a DF with the name of the column changed
to-report DF:rename [df oldcolumn newcolumn]
  let head DF:header df
  ifelse member? oldcolumn head 
  [ let i position oldcolumn head
    report fput (replace-item i head newcolumn) (df:data df)
  ]
  [ report false ]
end

; Add new column/attribute to a DF
to-report DF:add-column [newcolumn df newcontent]
  let aux fput newcolumn newcontent
  report (map [[x y] -> (lput y x)] df aux)
end

; Add a new column that is calculated from the previous 
; ones. It receives the name of the new column, the DF
; and a reporter that takes a list (with the content of
; the row) and compute the value of the new column.
to-report DF:add-calculated-column [newcolumn df f]
  let newcontent DF:map [r -> (runresult f r)] df
  report DF:add-column newcolumn df newcontent
end 

; Reports the column of an attribute (with head)
to-report DF:column [at df]
  let ats first df
  let p position at ats
  report map [ x -> item p x ] df
end

; Reports for a row the value of an attribute
to-report DF:value [attr df r]
  let i position attr DF:header df
  report item i r
end


; Reports the dataframe filtering the rows verifying f
to-report DF:filter [f df]
  report fput (df:header df) filter [r -> (runresult f r)] (DF:data df)
end

to-report DF:map [f df]
  report map [r -> (runresult f r)] (DF:data df)
end

to DF:foreach [df f]
  foreach DF:data df [r -> (run f r)]
end

; Report the values (list with no duplicates) of an attribute
to-report DF:values [df att]
  let i position att DF:header df
  report remove-duplicates map [r -> item i r] (DF:data df)
end

; Reports the dataframe filtering one attribute with one value
to-report DF:filter-att [df att val]
  let atrs DF:header df
  let p position att atrs
  let df2 (fput (first df) filter [ x -> (item p x) = val ] (bf df))
  report df2
end

; Remove a column
to-report DF:remove [att df]
  let atrs DF:header df
  let i position att atrs
  let df2 map [x -> remove-item i x] df
  report df2
end

; Shows dataframe in Command Center
to DF:show [df]
  let m 1 + max map [ x -> max map [ y -> length (word y) ] x ] df
  output-print "Dataframe:"
  repeat 1 + (m + 1) * (last DF:Size df) [output-type "-"]
  output-print ""
  foreach df
  [ x ->
    output-type "|"
    foreach x
    [ y ->
      output-type y
      repeat (m - length (word y)) [output-type " "]
      output-type "|"
    ]
    output-print ""
    repeat 1 + (m + 1) * length (DF:header df) [output-type "-"]
    output-print ""
  ]
end

; Prints Dataframe in Output: reports a string to be printed.
to-report DF:output [df]
  let s ""
  let atrs (DF:header df)
  let long map [ x -> 1 + max map [ y -> length (word y) ] (DF:column x df) ] atrs
  set s (word s "\n")
  ;; Lineas
  let lin "├"
  foreach long
  [ x ->
    repeat (1 + x) [set lin (word lin "─")]
    set lin (word lin "┼")
  ]
  set lin (word (bl lin) "┤\n")
  ;; Cabecera
  set s (word s "│ ")
  (foreach (DF:header df) long
    [ [x y] ->
      set s (word s  x )
      repeat (y - length (word x)) [set s (word s " ")]
      set s (word s "│ ")
    ])
  set s (word s "\n" lin)
  ; Cuerpo
  foreach (DF:data df)
  [ x ->
    set s (word s lin)
    set s (word s "│ ")
    (foreach x long
    [ [y z] ->
      set s (word s  y )
      repeat (z - length (word y)) [set s (word s " ")]
      set s (word s "│ ")
    ])
    set s (word s "\n")
    ;set s (word s lin)
  ]
  ;; Linea final
  let lin2 "└"
  foreach long
  [ x ->
    repeat (1 + x) [set lin2 (word lin2 "─")]
    set lin2 (word lin2 "┴")
  ]
  set lin2 (word (bl lin2) "┘\n")
  set s (word s lin2)
  ; Devolución
  report s
end