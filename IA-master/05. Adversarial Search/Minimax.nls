;---------------------------------------------------------------------------
; MINIMAX procedures
;---------------------------------------------------------------------------

; Minimax launch the evaluation of the current state... and reports the 
; successor that reaches the maximum.
; #visible? (bool) will determine if the process produces visible changes (colors and labels)
; or not
to-report minimax [s #visible?]
  let res nobody
  ask s [
    let evaluation (eval #visible?) 
    if #visible? [set label last evaluation]
    set res first evaluation
  ]
  report res
end

; Eval function is the core of MINIMAX.
; We compute for every state a pair [successor fitness] that reports the evaluation
; of the state (min or max of fitness of successors) and one of the successors where
; this extreme is reached
to-report eval [ #visible? ]
  ; If it is a leaf state, we report the fitness stored in the state
  ifelse leaf?
  [ if #visible? [set label fitness]
    report (list self fitness)
  ]
  ; If not, we compute maximum or minimum (it depends if the player will play or the opponent)
  ; of the evaluation of successors
  [ let selected nobody
    ifelse player = 1
    [ set selected max-one-of legal-successors [last (eval #visible?)] ]
    [ set selected min-one-of legal-successors [last (eval #visible?)] ]
    if #visible? [
      ask legal-move-to selected [
        set color blue
        set thickness .2
      ]
      set label [last (eval #visible?)] of selected
    ]
    report (list selected [last (eval #visible?)] of selected)
  ]
end

; Report for getting the legal successors of this state (it depends on the problem we are solving,
; in this simple case it is only the successors in the graph)
to-report legal-successors
  report out-transition-neighbors
end

; Report for getting the legal move to reach state s' from the current one (it depends on the
; problem we are solving, in this simple case it is only the link connecting them)
to-report legal-move-to [a]
  report out-transition-to a
end


;; ------------------- Alpha Beta Pruning -----------------------------------
;;
;; Pseudocode:
;;
;function alphabeta(depth, α, β)         
;    if  depth = 0 or node is a terminal node
;        return the heuristic value of node
;    if  Player = MaxPlayer
;        for each child of node
;            α := max(α, alphabeta(child, depth-1, α, β, not(Player) ))     
;            if β ≤ α
;                break                             (* Beta cut-off *)
;        return α
;    else
;        for each child of node
;            β := min(β, alphabeta(child, depth-1, α, β, not(Player) ))     
;            if β ≤ α
;                break                             (* Alpha cut-off *)
;        return β

to alphabeta [d alpha beta]
  ifelse d = 0 or leaf?
  [set color ifelse-value player = 1 [green] [red]]
  [ifelse player = 1 
    [ foreach (sort-by positions legal-successors)
      [ s -> 
        ask s [alphabeta (d - 1) alpha beta]
        set alpha max (list alpha ([fitness] of s))
        if beta < alpha [stop]
        set color green
      ]
      set fitness alpha
    ]
    [ foreach (sort-by positions legal-successors)
      [ s -> 
        ask s [alphabeta (d - 1) alpha beta]
        set beta min (list beta ([fitness] of s))
        if beta < alpha [stop]
        set color red
      ]
      set fitness beta
    ]
  ]
end

; Boolean report used to sort the states in the tree
to-report positions [x y]
  report [xcor] of x <= [xcor] of y
end